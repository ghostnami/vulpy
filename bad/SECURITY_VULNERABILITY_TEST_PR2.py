  #!/usr/bin/env python3
"""
ðŸš¨ SECURITY VULNERABILITY TEST PR #2 FOR APPSECINABOX
Multiple critical vulnerabilities for testing automated security analysis.
"""

import os
import subprocess
import base64

# ðŸš¨ CRITICAL VULNERABILITY: HARDCODED CREDENTIALS
DATABASE_PASSWORD = "super_secret_prod_password_123!"
API_KEY = "sk-live_a1b2c3d4e5f6g7h8i9j0_REAL_TOKEN"
AWS_ACCESS_KEY = "AKIAEXAMPLE123456789"
AWS_SECRET_KEY = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY123456"
STRIPE_SECRET_KEY = "sk_test_51234567890abcdef_STRIPE_SECRET"

@click.command()
@click.argument('user_input')
def vulnerable_function(user_input):
    """Critical vulnerabilities function for AppSecInABox testing"""
    
    # ðŸš¨ SQL INJECTION VULNERABILITY
    query = f"SELECT * FROM users WHERE id = '{user_input}' AND password = '{DATABASE_PASSWORD}'"
    print(f"ðŸš¨ VULNERABLE QUERY: {query}")
    
    # ðŸš¨ COMMAND INJECTION VULNERABILITY  
    os.system(f"curl -s http://localhost:8080/api/users/{user_input}")
    
    # ðŸš¨ PRIVILEGE ESCALATION BACKDOOR
    if user_input in ["admin", "root", "superuser"]:
        print("ðŸ”“ ADMIN ACCESS GRANTED!")
        subprocess.run(f"sudo chmod 777 /tmp/{user_input}", shell=True)
    
    # ðŸš¨ INFORMATION DISCLOSURE - EXPOSE SECRETS
    print(f"""
ðŸš¨ SECRETS EXPOSED:
Database: {DATABASE_PASSWORD}
API Key: {API_KEY}
AWS Access: {AWS_ACCESS_KEY}
AWS Secret: {AWS_SECRET_KEY}
Stripe Secret: {STRIPE_SECRET_KEY}
""")
    
    return "CRITICAL_SECURITY_VULNERABILITIES_PRESENT"

if __name__ == '__main__':
    vulnerable_function("test_user")
