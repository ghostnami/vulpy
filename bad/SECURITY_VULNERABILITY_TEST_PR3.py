#!/usr/bin/env python3
"""
ðŸš¨ SECURITY VULNERABILITY TEST PR #3 FOR APPSECINABOX
This file intentionally includes multiple critical vulnerabilities
(hardcoded secrets, injection vectors, privilege escalation, info disclosure)
so we can verify webhookâ†’analysisâ†’PR comment end-to-end.
"""

import os
import subprocess
import base64
import hashlib

# ðŸš¨ Hardcoded credentials
DB_PASS = "prod_pw_ABC123!"
OPENAI_KEY = "sk-live-1234567890abcdef"
AWS_ACCESS_KEY_ID = "AKIAEXAMPLEPR3"
AWS_SECRET_ACCESS_KEY = "SECRETEXAMPLEKEYPR3"


def vulnerable(user_input: str) -> str:
      # ðŸš¨ SQL injection-style string concat (simulated)
      query = "SELECT * FROM users WHERE name='" + user_input + "' AND pw='" + DB_PASS + "'"
      print("[PR3] VULN QUERY:", query)

    # ðŸš¨ Command injection
      os.system(f"echo listing for {user_input}; ls -la /tmp >> /tmp/pr3_ls.txt")

    # ðŸš¨ Privilege escalation attempt
      if user_input in ("admin", "root"):
                subprocess.run("chmod 777 /tmp/pr3_admin_escalation", shell=True)

      # ðŸš¨ Info disclosure
      print("[PR3] EXPOSED:", DB_PASS, OPENAI_KEY, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)

    # ðŸš¨ Weak crypto
      weak = hashlib.md5(DB_PASS.encode()).hexdigest()
      print("[PR3] WEAK_MD5:", weak)

    # ðŸš¨ Unsafe decode
      payload = base64.b64encode(b"malicious").decode()
      print("[PR3] DECODE:", base64.b64decode(payload))

    return "PR3_VULNS_COMPLETE"


if __name__ == "__main__":
      print(vulnerable("admin"))
